----------------------------------------------------------------------
-- This Agda code is designed to accompany the paper "Axioms for
-- Modelling Cubical Type Theory in a Topos" (CSL Special Issue
-- version). 
--
-- The idea for getting an impredicative universe of propositions Œ©
-- comes from Martin Escardo, more details can be found at:
--
--          http://www.cs.bham.ac.uk/~mhe/impredicativity/          
----------------------------------------------------------------------

module prelude where

open import Agda.Primitive public

infix  1 Œ£ proof:_
infixr 2 _‚â°[_]‚â°_
infix  3 _qed
infixr 3 _,_
infixr 5  _√ó_ _‚àò_ _‚äé_

----------------------------------------------------------------------
-- Identity function
----------------------------------------------------------------------
id : {A : Set} ‚Üí A ‚Üí A
id x = x

----------------------------------------------------------------------
-- Composition
----------------------------------------------------------------------
_‚àò_ :
  {‚Ñì m n : Level}
  {A : Set ‚Ñì}
  {B : Set m}
  {C : Set n}
  (g : B ‚Üí C)
  (f : A ‚Üí B)
  ‚Üí -------------
  A ‚Üí C
(g ‚àò f) x = g (f x)

----------------------------------------------------------------------
-- Propositional equality
----------------------------------------------------------------------
open import Agda.Builtin.Equality public

trans :
  {‚Ñì : Level}
  {A : Set ‚Ñì}
  {x y z : A}
  (q : y ‚â° z)
  (p : x ‚â° y)
  ‚Üí ---------
  x ‚â° z
trans q refl = q

symm :
  {‚Ñì : Level}
  {A : Set ‚Ñì}
  {x y : A}
  (p : x ‚â° y)
  ‚Üí ---------
  y ‚â° x
symm refl = refl

cong :
  {‚Ñì ‚Ñì' : Level}
  {A : Set ‚Ñì}
  {B : Set ‚Ñì'}
  (f : A ‚Üí B)
  {x y : A}
  (p : x ‚â° y)
  ‚Üí -----------
  f x ‚â° f y
cong _ refl = refl

cong‚ÇÇ :
  {‚Ñì ‚Ñì' : Level}
  {A A' : Set ‚Ñì}
  {B : Set ‚Ñì'}
  (f : A ‚Üí A' ‚Üí B)
  {x y  : A}
  {x' y' : A'}
  (p : x ‚â° y)
  (q : x' ‚â° y')
  ‚Üí --------------
  f x x' ‚â° f y y'
cong‚ÇÇ _ refl refl = refl

subst :
  {‚Ñì ‚Ñì' : Level}
  {A  : Set ‚Ñì}
  (B : A ‚Üí Set ‚Ñì')
  {x y : A}
  (p : x ‚â° y)
  ‚Üí --------------
  B x ‚Üí B y
subst _  refl = Œª b ‚Üí b

congdep :
  {‚Ñì ‚Ñì' : Level}
  {A : Set ‚Ñì}
  {B : A ‚Üí Set ‚Ñì'}
  (f : (a : A) ‚Üí B a)
  {x y : A}
  (p : x ‚â° y)
  ‚Üí -----------
  subst B p (f x) ‚â° f y
congdep _ refl = refl

substconst :
  {‚Ñì ‚Ñì' : Level}
  {A : Set ‚Ñì}
  (B : Set ‚Ñì')
  {x y : A}
  (p : x ‚â° y)
  (b : B)
  ‚Üí ------------------------
  (subst (Œª _ ‚Üí B) p) b ‚â° b
substconst _ refl _ = refl

subst‚ÇÇ :
  {‚Ñì ‚Ñì' : Level}
  {A  A' : Set ‚Ñì}
  (B : A ‚Üí A' ‚Üí Set ‚Ñì')
  {x y  : A}
  {x' y' : A'}
  (p : x ‚â° y)
  (p' : x' ‚â° y')
  ‚Üí ------------------
  B x x' ‚Üí B y y'
subst‚ÇÇ _ refl refl = Œª b ‚Üí b

uip :
  {‚Ñì : Level}
  {A : Set ‚Ñì}
  {x y : A}
  (p q : x ‚â° y)
  ‚Üí -----------
  p ‚â° q
uip refl refl = refl

uipImp :
  {‚Ñì : Level}
  {A : Set ‚Ñì}
  {x y : A}
  {p q : x ‚â° y}
  ‚Üí -----------
  p ‚â° q
uipImp {p = refl} {q = refl} = refl

appCong :
  {‚Ñì ‚Ñì' : Level}
  {A : Set ‚Ñì}
  {B : Set ‚Ñì'}
  {f g : A ‚Üí B}
  {x : A}
  (p : f ‚â° g)
  ‚Üí -----------
  f x ‚â° g x
appCong refl = refl

----------------------------------------------------------------------
-- Equational reasoning
----------------------------------------------------------------------
proof:_ :
  {‚Ñì : Level}
  {A : Set ‚Ñì}
  {x y : A}
  ‚Üí ---------------------
  x ‚â° y ‚Üí x ‚â° y
proof: p = p

_‚â°[_]‚â°_ :
  {‚Ñì : Level}
  {A : Set ‚Ñì}
  (x : A)
  {y z : A}
  ‚Üí -------------------
  x ‚â° y ‚Üí y ‚â° z ‚Üí x ‚â° z
_ ‚â°[ p ]‚â° q = trans q p  

_qed :
  {‚Ñì : Level}
  {A : Set ‚Ñì}
  (x : A)
  ‚Üí ---------
  x ‚â° x
_qed _ = refl

----------------------------------------------------------------------
-- Type coersion
----------------------------------------------------------------------
coe : {A B : Set} ‚Üí A ‚â° B ‚Üí A ‚Üí B
coe refl = id

----------------------------------------------------------------------
-- Empty type
----------------------------------------------------------------------
data ‚àÖ : Set where

‚àÖ-elim :
  {‚Ñì : Level}
  {A : Set ‚Ñì}
  ‚Üí ---------
  ‚àÖ ‚Üí A
‚àÖ-elim ()

----------------------------------------------------------------------
-- One-element type
----------------------------------------------------------------------
open import Agda.Builtin.Unit renaming (‚ä§ to Unit) public

----------------------------------------------------------------------
-- Booleans
----------------------------------------------------------------------
open import Agda.Builtin.Bool renaming (Bool to ùîπ) public

----------------------------------------------------------------------
-- Natural Numbers
----------------------------------------------------------------------
open import Agda.Builtin.Nat renaming (Nat to ‚Ñï) public

----------------------------------------------------------------------
-- Disjoint union
----------------------------------------------------------------------
data _‚äé_ {‚Ñì m : Level}(A : Set ‚Ñì)(B : Set m) : Set (‚Ñì ‚äî m) where
  inl : A ‚Üí A ‚äé B
  inr : B ‚Üí A ‚äé B

----------------------------------------------------------------------
-- Dependent products
----------------------------------------------------------------------
record Œ£ {‚Ñì m : Level} (A : Set ‚Ñì) (B : A ‚Üí Set m) : Set (‚Ñì ‚äî m) where
  constructor _,_
  field
    fst : A
    snd : B fst

open Œ£ public

syntax Œ£ A (Œª x ‚Üí B) = Œ£ x ‚àà A , B

_√ó_ : {‚Ñì m : Level} ‚Üí Set ‚Ñì ‚Üí Set m ‚Üí Set (‚Ñì ‚äî m)
A √ó B = Œ£ A (Œª _ ‚Üí B)

_√ó'_ : {A A' B B' : Set} ‚Üí (A ‚Üí A') ‚Üí (B ‚Üí B') ‚Üí A √ó B ‚Üí A' √ó B'
(f √ó' g) (a , b) = f a , g b

Œ£ext :
  {‚Ñì m : Level}
  {A : Set ‚Ñì}
  {B : A ‚Üí Set m}
  {x x' : A}
  {y : B x}
  {y' : B x'}
  (p : x ‚â° x')
  (q : subst B p y ‚â° y')
  ‚Üí --------------------
  (x , y) ‚â° (x' , y')
Œ£ext refl refl = refl

Œ£eq‚ÇÅ :
  {‚Ñì ‚Ñì' : Level}
  {A  : Set ‚Ñì}
  {B : A ‚Üí Set ‚Ñì'}
  {x y : Œ£ A B}
  (p : x ‚â° y)
  ‚Üí --------------
  fst x ‚â° fst y
Œ£eq‚ÇÅ refl = refl

Œ£eq‚ÇÇ :
  {‚Ñì ‚Ñì' : Level}
  {A  : Set ‚Ñì}
  {B : A ‚Üí Set ‚Ñì'}
  {x y : Œ£ A B}
  (p : x ‚â° y)
  ‚Üí --------------
  subst B (Œ£eq‚ÇÅ p) (snd x) ‚â° snd y
Œ£eq‚ÇÇ refl = refl
