{-# OPTIONS --rewriting #-}

module Data.circle where

open import prelude
open import impredicative
open import interval
open import cof
open import fibrations

open import Data.paths

CompObj : OI โ Set โ Set
CompObj e A = (ฯ : Cof)(f : [ ฯ ] โ Int โ A) โ
  โฆ xโ โ A โฃ (ฯ , f) โ โจ e โฉ โ xโ โง โ
  โฆ xโ โ A โฃ (ฯ , f) โ โจ ! e โฉ โ xโ โง

isFibObj : Set โ Set
isFibObj A = (e : OI) โ CompObj e A

-- This should follow from the fact that fibrations are closed under ฮฃ
-- but needs boilerplate work since isFibObj !โก isFib {ฮ = Unit}. TODO.
postulate
  ฮฃFib' : {A : Set}{B : A โ Set}(ฮฑ : isFibObj A)(ฮฒ : isFib B) โ isFibObj (ฮฃ A B)

lift : {A B : Set}(ฯ : Cof){f : [ ฯ ] โ A}(ฮฑ : A โ B) โ โฆ x โ A โฃ (ฯ , f) โ x โง โ โฆ y โ B โฃ (ฯ , ฮป u โ ฮฑ (f u)) โ y โง
lift _ ฮฑ (x , ext) = (ฮฑ x , ฮป u โ cong ฮฑ (ext u))

record Sยน-alg : Setโ where
 field
  obj : Set
  h   : isFibObj obj
  ba  : obj
  lo  : ba ~ ba

open Sยน-alg

record Sยน-map (A B : Sยน-alg) : Set where
 field
  map    : obj A โ obj B
  b-pres : map (ba A) โก ba B
  l-pres : (i : Int) โ map (lo A at i) โก (lo B) at i
  h-pres :
    (e : OI)
    (ฯ : Cof)
    (f : [ ฯ ] โ Int โ obj A)
    (xโ : โฆ xโ โ obj A โฃ (ฯ , f) โ โจ e โฉ โ xโ โง)
    โ -----------------------
    map (fst (h A e ฯ f xโ)) โก fst (h B e ฯ (ฮป u i โ map (f u i)) (lift ฯ map xโ))

open Sยน-map

idSยน : {A : Sยน-alg} โ Sยน-map A A
map idSยน = id
b-pres idSยน = refl
l-pres idSยน _ = refl
h-pres (idSยน {A}) e ฯ f x = cong (ฮป x โ fst (h A e ฯ f x)) (ฮฃext refl (funext ฮป u โ symm cong-id)) where
  cong-id : {A : Set}{x y : A}{p : x โก y} โ cong id p โก p
  cong-id {p = refl} = refl

_โSยน_ : {A B C : Sยน-alg}(g :  Sยน-map B C)(f :  Sยน-map A B) โ  Sยน-map A C
map (ฮฒ โSยน ฮฑ) = map ฮฒ โ map ฮฑ
b-pres (_โSยน_ {C = C} ฮฒ ฮฑ) = subst (ฮป x โ map ฮฒ x โก ba C) (symm (b-pres ฮฑ)) (b-pres ฮฒ)
l-pres (_โSยน_ {C = C} ฮฒ ฮฑ) i = subst (ฮป x โ map ฮฒ x โก lo C at i) (symm (l-pres ฮฑ i)) (l-pres ฮฒ i)
h-pres (_โSยน_ {C = C} ฮฒ ฮฑ) e ฯ f xโ =
  trans
    (cong (ฮป x โ fst (h C e ฯ (ฮป u i โ map ฮฒ (map ฮฑ (f u i))) x)) (ฮฃext refl (funext ฮป _ โ uipImp)))
    (trans
      (h-pres ฮฒ e ฯ (ฮป u i โ map ฮฑ (f u i)) (lift ฯ (map ฮฑ) xโ))
      (cong (map ฮฒ) (h-pres ฮฑ e ฯ f xโ))
    )

record Initial-Sยน-alg : Setโ where
 field
  Alg     : Sยน-alg
  initial : (B : Sยน-alg) โ Sยน-map Alg B
  unique  : {B : Sยน-alg}(ฮฑ ฮฒ : Sยน-map Alg B) โ ฮฑ โก ฮฒ

open Initial-Sยน-alg

postulate
  initial-Sยน-alg : Initial-Sยน-alg

๐ยน-alg : Sยน-alg
๐ยน-alg = Alg initial-Sยน-alg

๐ยน : Set
๐ยน = obj ๐ยน-alg

base : ๐ยน
base = ba ๐ยน-alg

loop : base ~ base
loop = lo ๐ยน-alg

open import Agda.Builtin.TrustMe

๐ยน-elim :
  (P : ๐ยน โ Set)
  (ฯ : isFib P)
  (a : P base)
  (l : (i : Int) โ P (loop at i))
  (lO : subst P (atO loop) (l O) โก a)
  (lI : subst P (atI loop) (l I) โก a)
  โ ---------------------
  (x : ๐ยน) โ P x
๐ยน-elim P ฯ a l lO lI x = subst P ฯโโฮฑ=id (snd (map ฮฑ x)) where

  ฮฃ๐ยนP : Sยน-alg
  obj ฮฃ๐ยนP = ฮฃ x โ ๐ยน , P x
  h ฮฃ๐ยนP = ฮฃFib' (h ๐ยน-alg) ฯ
  ba ฮฃ๐ยนP = base , a
  fst (lo ฮฃ๐ยนP) i = loop at i , l i
  fst (snd (lo ฮฃ๐ยนP)) = ฮฃext (atO loop) lO
  snd (snd (lo ฮฃ๐ยนP)) = ฮฃext (atI loop) lI

  ฯโ : Sยน-map ฮฃ๐ยนP ๐ยน-alg
  map ฯโ = fst
  b-pres ฯโ = refl
  l-pres ฯโ i = refl
  h-pres ฯโ e ฯ f xโ = primTrustMe  -- Should be provable once ฮฃFib' not a postulate

  ฮฑ : Sยน-map ๐ยน-alg ฮฃ๐ยนP
  ฮฑ = initial initial-Sยน-alg ฮฃ๐ยนP

  ฯโโฮฑ=id : (fst โ map ฮฑ) x โก x
  ฯโโฮฑ=id = cong (ฮป ฮฑ โ map ฮฑ x) (unique initial-Sยน-alg (ฯโ โSยน ฮฑ) idSยน)
